captool:
{
    timerPeriod = 60;                                       // timer of periodic events [sec], e.g., status logs and periodic file splits; 0 switches off (default: 60)

    controlPort = 44444;                                    // port at which captool listens to control commands (will try higher numbers if cannot bind)

    parserId = 0;                                           // 0-255; identification of the captool instance; if more instances started, each should have a different parserId

    statusManager: {
        filePrefix = "status";                              // prefix of log files
        filePostfix = ".txt";                               // postfix of log files
        outputEnabled = false;                              // enable/disable output
        bulkfilePrefix = "status";                          // prefix of bulk log files
        bulkoutputEnabled = false;                          // enable/disable bulk output
    };

    moduleManager: {
        activeModule = "capture";                           // the packet listener module
    };

    fileManager: {
        splitFiles = true;                                  // if true, output files are split and postfixed
        outputDirectory = "/var/opt/ericsson/eniq-analysis/captool/output/captool-<instance>_out"; // root of all output files, except bulk files
        bulkoutputDirectory = "/var/opt/ericsson/eniq-analysis/captool/output/captool_bulk";       // root of all bulk output files (MS SQL bulk files)
        bulkfilePostfix = ".blk";                           // postfix of all bulk output files (including extension)
    };

    securityManager: {
        anonymize = false;                                  // enables or disables encryption and anonymization (default: false). When set to true, the followings apply:
                                                            //  - IMSIs will be encrypted using a key from keyLocation (using the same algorithm than Moniq)  
                                                            //  - From the IMEI (TAC:SerialNumber:SWVersionNumber) only the TAC part and the SWVersionNumber part (this latter only in the blk output files) is kept, the SerialNumber part is removed.
                                                            //  - anything after a '?' charceter will be removed in URLs
                                                            //  - last 2 bytes of subscriber IP addresses are not printed (replaced by 0, e.g.: xxx.yyy.zzz.www -> xxx.yyy.0.0)
        backwardCompatibility = false;                      // enables or disables backward compatibility IMSI encryption mode (default: false). When set to true, the followings apply:
                                                            //  - futher obfuscation by hashing IMSIs from 15 digits to 13 digits (at the expense of possible collisions!)
                                                            //  - appends a newline character at the end of the key (was a bug on earlier Captool systems)
        keyLocation = "conf/key.txt";                       // path to key file
    };

    classification: {
        fileName = "conf/classification.xml";               // path to xml file describing traffic classification signatures and rules
    };

    modules:
    {

        // ----------------------------
        // Packet processing modules
        // ----------------------------

        capture:
        {
            type = "PcapCapture";

            connections = (                                 //
                            ("default", "eth")              // using the new Moniq Kernel Module, the protocol stack starts with 'eth'
                                                            // using the original Captool Kernel Module, the protocol stack starts with 'ip'
            );

            mode = "offline";                               // input mode: offline|online
                                                            //   offline input can be one of the following: pcap file|named pipe|KERNEL MODULE's output file on the /proc file system
                                                            //   online  input can be one of the following: ethernet interface or bridge device (e.g. eth0, br0)
            input = "/proc/pcapFile";      					// the name of the input file, named pipe, /proc file, ethernet interface or bridge device
            maxPackets = 0;                                 // stop capture after reading that many packets. 0 means infinity (default setting)
        };

        eth:
        {
            type = "ETH";

            connections = (                                 // based on eth protocol field
                            (0x0800, "ip")                  // ip = 0x0800
            );

//          gatewayAddressFile = "conf/gateway_macs.txt";   // the name of the file containing gateway MAC addresses (one address per line) - not needed for Gn config
        };

        ip:
        {
            type = "IP";

            connections = (                                 // based on ip protocol field
                            (17, "udp"),                    // ip proto 17 = udp
//                            (132, "sctp")                 // ip proto 132 = sctp
                            (132, "dump_sctp")              // ip proto 132 = sctp, sctp parsing is not implemented yet, bypass to dump module
            );

            iptype = "tunnel";                              // type of IP layer: tunnel|user
                                                            //   tunnel: This is the IP layer that is lower in the protocol stack, next to the link-layer protocol
                                                            //   user: This is the IP layer that is higher in the protocol stack, carrying the user-plane traffic
            idFlows = false;                                // update IP address fields of flowID in packet? (not the case for the outer IP header)
            defrag = true;                                  // enable/disable defragmentation (default = true)
            filterFragments = false;                        // drop non-first fragments when _not_ defragmenting (default = false)
//          ipv6Module = "ipv6_dump";                       // IPv6 not yet supported, but this parameter can be used to forward IPv6 traffic to another module (e.g. PcapOutput)
        };

        udp:
        {
            type = "UDP";

            connections = (                                 // based on udp ports
                            (2123, "gtpc"),                 // GTP-C traffic
                            (2152, "gtpu")                  // GTP-U traffic
            );

            idFlows = false;                                // update port number fields of flowID in packet? (not the case for the outer UDP header)
        };

        gtpc:                                               // This module implemets signaling processing on the Gn interface
                                                            // Responsible for tracking the PDP contexts from the GTP-C signaling
                                                            // Protocol stack supported: eth:(vlan):ip:udp:gtp-c
        {
            type = "GTPControl";

            connections = (                                 // GTP-C traffic is forwarded to write pcap files
                            ("default", "dump_gtpc")
            );

            gsnIPModule = "ip";                             // which IP module to ask for packet's gsn ip address
            pdpTimeout = 36000;                             // length of inactivity period [sec] after which a PDP context is purged (0 means no timeouts at all)
            samplingEnabled = true;                         // Specifies that IMSI filtering (using the kernel mudule) is enabled or not
                                                            // more exactly: the captool parser is allowed to control the kernel module only if samplingEnabled is set to true
            samplingRatio = 0.999;                          // Specifies the ratio of subscribers whose traffic will pass via the IP filter in the kernel module
                                                            // This filter is controled by the GTPControl module.
            maxFileSize = 0;                                // maximum output file size; 0 = inf.
            filePrefix = "pdp";                             // prefix of PDP output files
            filePostfix = ".txt";                           // postfix of PDP output files (including extension)
            outputEnabled = false;                          // enable/disable output
        };

        //sctp:                                               // This module implemets signaling processing on the IuPS over IP interface
        //                                                    // Responsible for tracking the PDP contexts from the RANAP, GMM and GSM signaling
        //                                                    // Protocol stack supported: eth:(vlan):ip:sctp:mtp3:sccp:ranap:gmm/gsm
        //{
        //    type = "SCTP";
        //
        //    connections = (                                 // SCTP traffic is forwarded to write pcap files
        //                    ("default", "dump_sctp")
        //    );
        //    
        //    transportModule = "ip";
        //};

        gtpu:
        {
            type = "GTPUser";

            connections = (                                 // based on gtp type
                            (255, "imsifilter")             // t-pdu = 255
            );

            gsnIPModule = "ip";                             // which IP module to ask for packet's gsn ip address
            gtpControlModule = "gtpc";                      // which signaling module to ask for PDP context: gtpc|sctp
                                                            //    gtpc: used on Gn or Gn-3GDT interface (GTP-C signaling)
                                                            //    sctp: used on IuPS or Gn-3GDT interface (RANAP signaling)
        };

        imsifilter:                                         // ONLY FILTERING BASED ON IMSI OR IMEI-TAC IS POSSIBLE AT THIS POINT! FILTERING ON OTHER PARAMETERS SHOULD BE DONE __AFTER__ THE FLOW MODULE!
        {
            type = "Filter";

            connections = (
                            ("pass", "ip2"),                // Packets passing the filter will go there
                            ("drop", "null")                // Packets not passing the filter are dropped
            );

            bypass = true;                                  // Set to true in order to completely ignore the filter and pass all packets without processing
            mode = "sampling";                              // Mode selection (sampling|filtering)
            filtertype = "imsi";                            // Specifies what to filter on (imsi|tac|ip|port)
            ratio = 1.0;                                    // ratio of "imsi's" put to default output
        };

        ip2:
        {
            type = "IP";

            connections = (                                 // based on ip protocol field
                            (17, "udp2"),                   // ip proto 17 = udp
                            ( 6, "tcp2"),                   // ip proto 6 = tcp
                            ("default", "flow")             // packets from other transport layers can go directly to the flow module
            );

            iptype = "user";                                // type of IP layer: tunnel|user
                                                            //   tunnel: This is the IP layer that is lower in the protocol stack, next to the link-layer protocol
                                                            //   user: This is the IP layer that is higher in the protocol stack, carrying the user-plane traffic
            idFlows = true;                                 // update IP address fields of flowID in packet? (has to be set for the inner IP header)
            defrag = true;                                  // enable/disable defragmentation (default = true)
            filterFragments = false;                        // drop non-first fragments when _not_ defragmenting (default = false)
//          ipv6Module = "ipv6_dump";                       // IPv6 not yet supported, but this parameter can be used to forward IPv6 traffic to another module (e.g. PcapOutput)
        };

        udp2:
        {
            type = "UDP";

            connections = (                                 // based on udp ports
                            ("default", "flow")             // all UDP traffic is forwarded to the flow module
            );

            idFlows = true;                                 // update port number fields of flowID in packet? (has to be set for the inner UDP header)
        };

        tcp2:
        {
            type = "TCP";

            connections = (                                 // based on tcp ports
                            ("default", "flow")             // all TCP traffic is forwarded to the flow module
            );

            idFlows = true;                                 // update port number fields of flowID in packet? (has to be set for the inner TCP header)
        };

        flow:
        {
            type = "FlowOutputStrict";                      // FlowOutputStrict is the preferred Flow module. However, when packet direction information is not available
                                                            // (either from GTP-C messages or gateway MAC addresses), than you have to fall back to FlowOutput.

            connections = (
                            ("default", "dispatcher")       // has default connection only
            );

            gtpControlModule = "gtpc";                      // which signaling module to ask for PDP context: gtpc|sctp
                                                            //    gtpc: used on Gn or Gn-3GDT interface (GTP-C signaling)
                                                            //    sctp: used on IuPS or Gn-3GDT interface (RANAP signaling)
            directTunnelHack = false;                       // Indicates whether PDP context need to be assigned to flows and packets based on user IP addresses instead of TEIDs.
                                                            //   Required in case GTP-C signaling is captured on the Gn interface,
                                                            //   + GTP-U user plane traffic is captured on the IuPS (non-3GDT) interface,
                                                            //   hence PDP binding cannot be done based on TEIDs extracted from GTP-C.
                                                            //   directTunnelHack is available only in case of gtpControlModule = "gtpc.
            baseModule = "ip2";                             // the lowest level module whose headers are already included when counting total packet length
            flowTimeout = 75;                               // 0: never; default: 75 [sec] (same as Moniq parser tcp_idle_timer)
            firstFlowModule = "p2pheuristics";              // the name of the first flow processing module which processes flows after they are timed out
                                                            // (similarly to the activeModule - being the main entry point for packet processing - the module specified here is the main entry point for flow processing)
            printHints = true;                              // specifies whether the list of classification hints should be printed in the flow log or not (default = false)
            storebytes = 0;                                 // store first this many uplink+downlink bytes per flow in the flowlog (default = 0)
            detailedStatistics = false;                     // set to true in order to generate detailed packet size and packet IAT statistics in the flow log (default = false)
            maxFileSize = 0;                                // maximum output file size; 0 = inf
            filePrefix = "flows";                           // prefix of output files
            filePostfix = ".txt";                           // postfix of output files (including extension)
            outputEnabled = false;                          // enable/disable output
            bulkfilePrefix = "flow";                        // prefix of bulk output files
            bulkoutputEnabled = false;                      // enable/disable bulk output
        };

        dispatcher:
        {
            type = "ClassifierDispatcher";

            connections = (
                            ("nonUdpTcpFirstPacket", "iptransportclassifier"),    // First packet of non UDP or TCP traffic
                            ("nonUdpTcp", "summary"),               // Any non UDP or TCP traffic (except first packet of "flow")
                            ("firstPacket", "portclassifier"),      // First packet of flow
                            ("firstReply", "serverportsearch"),     // First reply packet of the flow
                            ("firstFinal", "serverportsearch"),     // First packet of the flow where the flow is alread classified as final
                            ("unclassified", "http"),
                            ("classified", "summary"),              // Classified packets, no more classification required
                            ("recheck", "serverportsearch")         // Classified packet, but recheck every n = recheckFrequency packet
            );

            minPackets = 10;                                // Min number number of packets to be classified per flow (even if a "sure" hint is available earlier)
            maxPackets = 40;                                // Max number number of packets to be classified per flow (even if a "sure" hint is not yet available)
            recheckFrequency = 100;                         // Specify frequency of classification recheck (e.g. if set to 1000, then recheck will be performed for every 1000th packet of the flow)
        };

        iptransportclassifier:
        {
            type = "IPTransportClassifier";

            connections = (
                            ("default", "classassigner")
            );
        };

        portclassifier:
        {
            type = "PortClassifier";

            connections = (
                            ("default", "iprangeclassifier")
            );
        };

        iprangeclassifier:
        {
            type = "IPRangeClassifier";

            connections = (
                            ("default", "http")
            );
        };

        serverportsearch:
        {
            type = "ServerPortSearch";

            connections = (
                            ("default", "p2phostsearch")
            );

            timeout = 120;                                  // Server port timeout [sec] (after receiving the last packet for the given server port), default = 120 sec
        };

        p2phostsearch:
        {
            type = "P2PHostSearch";

            connections = (
                            ("default", "dispatcher2")
            );

            timeout = 900;                                  // Server port timeout [sec] (after receiving the last packet for the given server port), default = 900 sec
        };

        dispatcher2:
        {
            type = "ClassifierDispatcher";

            connections = (
                            ("unclassified", "http"),
                            ("classified", "classassigner") // Server port or P2P host search might add future hints
            );

            minPackets = 10;                                // Min number number of packets to be classified per flow (even if a "sure" hint is available earlier)
            maxPackets = 40;                                // Max number number of packets to be classified per flow (even if a "sure" hint is not yet available)
        };

        http:
        {
            type = "HTTP";

            connections = (
                            ("http", "dpi"),                // output for HTTP packets
                            ("non-http", "dpi")             // output for non-HTTP packets
            );

            httpHeadersToPrint = "User-Agent Host Server Content-Type";     // print these HTTP headers in the flow log (separated by spaces)
            printUrl = false;                                               // print request URL-s in the flow log (default = false)
            printHttpMethod = false;                                        // print HTTP GET/POST method in the flow log (default = false)
            printStatusCode = false;                                        // print status code in the flow log (default = false)
            maxBodySize = 20;                                               // parse this many bytes from HTTP body in addition to the headers (default = 20 bytes)
        };

        dpi:
        {
            type = "DPI";

            connections = (
                            ("default", "sequencenumber")
            );
        };

        sequencenumber:
        {
            type = "SequenceNumberClassifier";

            connections = (
                            ("default", "classassigner")
            );
        };

        classassigner:
        {
            type = "ClassAssigner";

            connections = (
                            ("default", "summary")
            );
        };

        summary:
        {
            type = "Summarizer";

            connections = (
                            ("default", "packetfilter")     // has default connection only
            );

            baseModule = "ip2";                             // the lowest level module whose headers are already included when counting total packet length
            filePrefix = "summary";                         // prefix of output files
            filePostfix = ".txt";                           // postfix of output files (including extension)
            outputEnabled = false;                          // enable/disable output
            bulkfilePrefix = "summary";                     // prefix of bulk output files
            bulkoutputEnabled = true;                       // enable/disable bulk output
        };

        packetfilter:
        {
            type = "Filter";

            connections = (
                            ("pass", "packetfilter2"),      // Packets passing the filter will go there
                            ("drop", "null")                // Packets not passing the filter are dropped
            );

            bypass = true;                                  // Set to true in order to completely ignore the filter and pass all packets without processing
            mode = "filtering";                             // Mode selection (sampling|filtering)
            filtertype = "ip";                              // Specifies what to filter on (imsi|tac|ip|port)
            endpoint = "peer";                              // Specifies which endpoint the filtering is applied to (subscriber|peer)
            values = ["74.125.0.0/16", "72.14.192.0/18"];   // Comma separated set of values for which the filter will pass packets (ip range example)
//          values = ["35827901"];                          // Comma separated set of values for which the filter will pass packets (tac example)
        };

        packetfilter2:
        {
            type = "Filter";
            connections = (
                            ("pass", "flowpacket"),         // Packets passing the filter will go there
                            ("drop", "null")                // Packets not passing the filter are dropped
            );

            bypass = true;                                  // Set to true in order to completely ignore the filter and pass all packets without processing
            mode = "filtering";                             // Mode selection (sampling|filtering)
            filtertype = "port";                            // Specifies what to filter on (imsi|tac|ip|port)
            invert = true;                                  // Set to true to invert filtering decision
            transport = "tcp";                              // Allows further filtering on transport protocol (tcp|udp)
            endpoint = "peer";                              // Specifies which endpoint the filtering is applied to (subscriber|peer)
            values = [80, 8080, 443];                       // Comma separated set of values for which the filter will pass packets
        };

        flowpacket:
        {
            type = "FlowPacket";

            connections = (
                            ("default", "imsifilter2")      // has default connection only
            );

            baseModule = "ip2";                             // the lowest level module whose headers are already included when counting total packet length
            maxFileSize = 0;                                // maximum output file size; 0 = inf
            filePrefix = "packets";                         // prefix of output files
            filePostfix = ".bin";                           // postfix of output files (including extension)
            outputEnabled = false;                          // enable/disable output
        };

        imsifilter2:
        {
            type = "Filter";

            connections = (
                            ("pass", "dump"),               // Packets passing the filter will go there
                            ("drop", "null")                // Packets not passing the filter are dropped
            );

            bypass = false;                                 // Set to true in order to completely ignore the filter and pass all packets without processing
            mode = "sampling";                              // Mode selection (sampling|filtering)
            filtertype = "imsi";                            // Specifies what to filter on (imsi|tac|ip|port)
            ratio = 0.002;                                  // ratio of "imsi's" put to default output
        };

        // ----------------------------
        // Flow processing modules
        // ----------------------------

        p2pheuristics:
        {
            type = "P2PHeuristics";                         //

            connections = (
                            ("default", "null")             // has default connection only
            );

            ipMapSize = 127;                                // Size of bloom filter used to track the number of peers for each subscriber
            filePrefix = "p2p_heuristics";                  // prefix of output files
            filePostfix = ".txt";                           // postfix of output files (including extension)
            outputEnabled = false;                          // enables/disables log output
        };

        // ----------------------------
        // Pcap file writing modules
        // ----------------------------

        dump:
        {
            type = "PcapOutput";

            connections = (                                 // has default connection only
            );

            baseModule = "eth";                             // lowermost module to be dumped
            snapLength = 0;                                 // snaplength to use (0 = no snap)
            flowPackets = 0;                                // dump how many packets of each flow? (0 = all)
            fixHeaders = true;                              // fix invalidated headers? (e.g. after defragmentation)
            maxFileSize = 0;                                // maximum output file size; 0 = inf
            filePrefix = "gtpu";                            // prefix of output files
            filePostfix = ".pcap";                          // postfix of output files (including extension)
            outputEnabled = false;                          // enable/disable output
        };

        dump_gtpc:
        {
            type = "PcapOutput";

            connections = (                                 // has default connection only
            );

            baseModule = "eth";                             // lowermost module to be dumped
            snapLength = 0;                                 // snaplength to use (0 = no snap)
            flowPackets = 0;                                // dump how many packets of each flow? (0 = all)
            fixHeaders = true;                              // fix invalidated headers? (e.g. after defragmentation)
            maxFileSize = 0;                                // maximum output file size; 0 = inf
            filePrefix = "gtpc";                            // prefix of output files
            filePostfix = ".pcap";                          // postfix of output files (including extension)
            outputEnabled = false;                          // enable/disable output
        };

        dump_sctp:
        {
            type = "PcapOutput";

            connections = (                                 // has default connection only
            );

            baseModule = "eth";                             // lowermost module to be dumped
            snapLength = 0;                                 // snaplength to use (0 = no snap)
            flowPackets = 0;                                // dump how many packets of each flow? (0 = all)
            fixHeaders = true;                              // fix invalidated headers? (e.g. after defragmentation)
            maxFileSize = 0;                                // maximum output file size; 0 = inf
            filePrefix = "sctp";                            // prefix of output files
            filePostfix = ".pcap";                          // postfix of output files (including extension)
            outputEnabled = false;                          // enable/disable output
        };

    };
};
